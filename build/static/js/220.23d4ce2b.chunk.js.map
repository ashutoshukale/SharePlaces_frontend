{"version":3,"file":"static/js/220.23d4ce2b.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/FormElements/Input.js","shared/components/UIElements/Card.js","shared/components/UIElements/ErrorModal.js","shared/components/UIElements/Modal.js","shared/hooks/form-hook.js","shared/hooks/http-hook.js","shared/util/Validators.js","user/pages/Auth.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\r\n\r\nimport \"./ImageUpload.css\";\r\nimport Button from \"./Button\";\r\n\r\nconst ImageUpload = (props) => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickedHandler = (event) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        type=\"file\"\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: \"none\" }}\r\n        accept=\".jpg,.png,.jped\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please Pick an Image</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n","import React, { useReducer, useEffect } from \"react\";\r\nimport { validate } from \"../../util/Validators\";\r\nimport \"./Input.css\";\r\n\r\nconst inputReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"CHANGE\":\r\n      return {\r\n        ...state,\r\n        value: action.val,\r\n        isValid: validate(action.val, action.validators),\r\n      };\r\n    case \"TOUCH\": {\r\n      return {\r\n        ...state,\r\n        isTouched: true,\r\n      };\r\n    }\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst Input = (props) => {\r\n  const [inputState, dispatch] = useReducer(inputReducer, {\r\n    value: props.initialValue || \"\",\r\n    isTouched: false,\r\n    isValid: props.initialValid || false,\r\n  });\r\n\r\n  const { id, onInput } = props;\r\n  const { value, isValid } = inputState;\r\n\r\n  useEffect(() => {\r\n    onInput(id, value, isValid);\r\n  }, [id, isValid, onInput, value]);\r\n\r\n  const changeHandler = (event) => {\r\n    dispatch({\r\n      type: \"CHANGE\",\r\n      val: event.target.value,\r\n      validators: props.validators,\r\n    });\r\n  };\r\n\r\n  const touchHandler = () => {\r\n    dispatch({\r\n      type: \"TOUCH\",\r\n    });\r\n  };\r\n\r\n  const element =\r\n    props.element === \"input\" ? (\r\n      <input\r\n        id={props.id}\r\n        type={props.type}\r\n        placeholder={props.placeholder}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    ) : (\r\n      <textarea\r\n        id={props.id}\r\n        rows={props.rows || 3}\r\n        onChange={changeHandler}\r\n        onBlur={touchHandler}\r\n        value={inputState.value}\r\n      />\r\n    );\r\n\r\n  return (\r\n    <div\r\n      className={`form-control ${\r\n        !inputState.isValid && inputState.isTouched && \"form-control--invalid\"\r\n      }`}\r\n    >\r\n      <label htmlFor={props.id}>{props.label}</label>\r\n      {element}\r\n      {!inputState.isValid && inputState.isTouched && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Input;\r\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\n\nimport Modal from './Modal';\nimport Button from '../FormElements/Button';\n\nconst ErrorModal = props => {\n  return (\n    <Modal\n      onCancel={props.onClear}\n      header=\"An Error Occurred!\"\n      show={!!props.error}\n      footer={<Button onClick={props.onClear}>Okay</Button>}\n    >\n      <p>{props.error}</p>\n    </Modal>\n  );\n};\n\nexport default ErrorModal;\n","import React from \"react\";\r\nimport \"./Modal.css\";\r\nimport Backdrop from \"./Backdrop.js\";\r\nimport { CSSTransition } from \"react-transition-group\";\r\nimport { createPortal } from \"react-dom\";\r\n\r\nconst ModalOverlay = (props) => {\r\n  const content = (\r\n    <div className={`modal ${props.className}`} style={props.style}>\r\n      <header className={`modal__header ${props.headerClass}`}>\r\n        <h2>{props.header}</h2>\r\n      </header>\r\n      <form\r\n        onSubmit={\r\n          props.onSubmit ? props.onSubmit : (event) => event.preventDefault()\r\n        }\r\n      >\r\n        <div className={`modal__content  ${props.contentClass}`}>\r\n          {props.children}\r\n        </div>\r\n        <footer className={`modal__footer ${props.footerClass}`}>\r\n          {props.footer}\r\n        </footer>\r\n      </form>\r\n    </div>\r\n  );\r\n  return createPortal(content, document.getElementById(\"modal-hook\"));\r\n};\r\n\r\nconst Modal = (props) => {\r\n  return (\r\n    <React.Fragment>\r\n      {props.show && <Backdrop onClick={props.onCancel} />}\r\n      <CSSTransition\r\n        in={props.show}\r\n        mountOnEnter\r\n        unmountOnExit\r\n        timeout={200}\r\n        classNames=\"modal\"\r\n      >\r\n        <ModalOverlay {...props} />\r\n      </CSSTransition>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import { useCallback, useReducer } from \"react\";\r\n\r\nconst formReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case \"INPUT_CHANGE\":\r\n      let formIsValid = true;\r\n      for (const inputId in state.inputs) {\r\n        if (!state.inputs[inputId]) {\r\n          continue;\r\n        }\r\n        if (inputId === action.inputId) {\r\n          formIsValid = formIsValid && action.isValid;\r\n        } else {\r\n          formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n        }\r\n      }\r\n      return {\r\n        ...state,\r\n        inputs: {\r\n          ...state.inputs,\r\n          [action.inputId]: { value: action.value, isValid: action.isValid },\r\n        },\r\n        isValid: formIsValid,\r\n      };\r\n    case \"SET_DATA\":\r\n      return {\r\n        inputs: action.inputs,\r\n        isValid: action.formValid,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst useForm = (initialInputs, initialFormValidity) => {\r\n  const [formState, dispatch] = useReducer(formReducer, {\r\n    inputs: initialInputs,\r\n    isValid: initialFormValidity, // whether overall form is valid or not\r\n  });\r\n\r\n  const inputHandler = useCallback((id, value, isValid) => {\r\n    dispatch({\r\n      type: \"INPUT_CHANGE\",\r\n      value: value,\r\n      isValid: isValid,\r\n      inputId: id,\r\n    });\r\n  }, []);\r\n\r\n  const setFormData = useCallback((inputData, formValidity) => {\r\n    dispatch({\r\n      type: \"SET_DATA\",\r\n      inputs: inputData,\r\n      formValid: formValidity,\r\n    });\r\n  }, []);\r\n\r\n  return [formState, inputHandler, setFormData];\r\n};\r\n\r\nexport default useForm;\r\n","import React, { useRef, useCallback, useEffect, useState } from \"react\";\r\n\r\nexport const useHttpClient = () => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState();\r\n\r\n  const activeHtttpRequests = useRef([]);\r\n\r\n  const sendRequest = useCallback(\r\n    async (url, method = \"GET\", body = null, headers = {}) => {\r\n      setIsLoading(true);\r\n      const httpAbortCtrl = new AbortController();\r\n      activeHtttpRequests.current.push(httpAbortCtrl);\r\n      try {\r\n        const response = await fetch(url, {\r\n          method,\r\n          body,\r\n          headers,\r\n          signal: httpAbortCtrl.signal,\r\n        });\r\n\r\n        const responseData = await response.json();\r\n\r\n        activeHtttpRequests.current = activeHtttpRequests.current.filter(\r\n          (reqCtrl) => reqCtrl !== httpAbortCtrl\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(responseData.message);\r\n        }\r\n        setIsLoading(false);\r\n        return responseData;\r\n      } catch (err) {\r\n        setError(err.message);\r\n        setIsLoading(false);\r\n        throw err;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = () => {\r\n    setError(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      activeHtttpRequests.current.forEach((abortCtrl) => abortCtrl.abort());\r\n    };\r\n  }, []);\r\n\r\n  return { isLoading, error, sendRequest, clearError };\r\n};\r\n","const VALIDATOR_TYPE_REQUIRE = \"REQUIRE\";\r\nconst VALIDATOR_TYPE_MINLENGTH = \"MINLENGTH\";\r\nconst VALIDATOR_TYPE_MAXLENGTH = \"MAXLENGTH\";\r\nconst VALIDATOR_TYPE_MIN = \"MIN\";\r\nconst VALIDATOR_TYPE_MAX = \"MAX\";\r\nconst VALIDATOR_TYPE_EMAIL = \"EMAIL\";\r\nconst VALIDATOR_TYPE_FILE = \"FILE\";\r\n\r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\nexport const VALIDATOR_FILE = () => ({ type: VALIDATOR_TYPE_FILE });\r\nexport const VALIDATOR_MINLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MINLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MAXLENGTH = (val) => ({\r\n  type: VALIDATOR_TYPE_MAXLENGTH,\r\n  val: val,\r\n});\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val });\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val });\r\nexport const VALIDATOR_EMAIL = () => ({ type: VALIDATOR_TYPE_EMAIL });\r\n\r\nexport const validate = (value, validators) => {\r\n  let isValid = true;\r\n  for (const validator of validators) {\r\n    if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n      isValid = isValid && value.trim().length > 0;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MINLENGTH) {\r\n      isValid = isValid && value.trim().length >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAXLENGTH) {\r\n      isValid = isValid && value.trim().length <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MIN) {\r\n      isValid = isValid && +value >= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_MAX) {\r\n      isValid = isValid && +value <= validator.val;\r\n    }\r\n    if (validator.type === VALIDATOR_TYPE_EMAIL) {\r\n      isValid = isValid && /^\\S+@\\S+\\.\\S+$/.test(value);\r\n    }\r\n  }\r\n  return isValid;\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\n\r\nimport useForm from \"../../shared/hooks/form-hook\";\r\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\r\nimport { AuthContext } from \"../../shared/context/auth-context\";\r\n\r\nimport Card from \"../../shared/components/UIElements/Card\";\r\nimport \"./Auth.css\";\r\nimport Input from \"../../shared/components/FormElements/Input\";\r\nimport Button from \"../../shared/components/FormElements/Button\";\r\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\r\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\r\nimport {\r\n  VALIDATOR_EMAIL,\r\n  VALIDATOR_MINLENGTH,\r\n  VALIDATOR_REQUIRE,\r\n} from \"../../shared/util/Validators\";\r\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\r\n\r\nconst Auth = () => {\r\n  const auth = useContext(AuthContext);\r\n  const [isLogin, setIsLogin] = useState(true);\r\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\r\n\r\n  const [formState, inputHandler, setFormData] = useForm(\r\n    {\r\n      email: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n      password: {\r\n        value: \"\",\r\n        isValid: false,\r\n      },\r\n    },\r\n    false\r\n  );\r\n\r\n  const switchModeHandler = () => {\r\n    if (!isLogin) {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: undefined,\r\n          image: undefined,\r\n        },\r\n        formState.inputs.email.isValid && formState.inputs.password.isValid\r\n      );\r\n    } else {\r\n      setFormData(\r\n        {\r\n          ...formState.inputs,\r\n          name: {\r\n            value: \"\",\r\n            isValid: false,\r\n          },\r\n          image: {\r\n            value: null,\r\n            isValid: false,\r\n          },\r\n        },\r\n        false\r\n      );\r\n    }\r\n    setIsLogin((prevMode) => !prevMode);\r\n  };\r\n\r\n  const authSubmitHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    if (isLogin) {\r\n      try {\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/login\",\r\n          \"POST\",\r\n          JSON.stringify({\r\n            email: formState.inputs.email.value,\r\n            password: formState.inputs.password.value,\r\n          }),\r\n          {\r\n            \"Content-Type\": \"application/json\",\r\n          }\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    } else {\r\n      try {\r\n        const formData = new FormData();\r\n        formData.append(\"email\", formState.inputs.email.value);\r\n        formData.append(\"password\", formState.inputs.password.value);\r\n        formData.append(\"name\", formState.inputs.name.value);\r\n        formData.append(\"image\", formState.inputs.image.value);\r\n        const responseData = await sendRequest(\r\n          process.env.REACT_APP_BACKEND_URL + \"/users/signup\",\r\n          \"POST\",\r\n          formData\r\n        );\r\n        auth.login(responseData.userId, responseData.token);\r\n      } catch (err) {}\r\n    }\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <ErrorModal error={error} onClear={clearError} />\r\n      <Card className=\"authentication\">\r\n        {isLoading && (\r\n          <div className=\"center\">\r\n            <LoadingSpinner asOverlay={true} />\r\n          </div>\r\n        )}\r\n        <h2>Login Required</h2>\r\n        <hr />\r\n        <form onSubmit={authSubmitHandler}>\r\n          {!isLogin && (\r\n            <React.Fragment>\r\n              <Input\r\n                element=\"input\"\r\n                id=\"name\"\r\n                type=\"text\"\r\n                label=\"Your Name\"\r\n                validators={[VALIDATOR_REQUIRE()]}\r\n                errorText=\"Please enter a name..\"\r\n                onInput={inputHandler}\r\n              />\r\n              <ImageUpload\r\n                id=\"image\"\r\n                center\r\n                onInput={inputHandler}\r\n                errorText=\"Please provide an Image\"\r\n              />\r\n            </React.Fragment>\r\n          )}\r\n          <Input\r\n            id=\"email\"\r\n            element=\"input\"\r\n            type=\"email\"\r\n            label=\"E-mail\"\r\n            validators={[VALIDATOR_EMAIL()]}\r\n            errorText=\"Please enter a valid email address\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Input\r\n            id=\"password\"\r\n            element=\"input\"\r\n            type=\"password\"\r\n            label=\"Password\"\r\n            validators={[VALIDATOR_MINLENGTH(6)]}\r\n            errorText=\"Please enter a valid password, atleast 5 characters\"\r\n            onInput={inputHandler}\r\n          />\r\n          <Button type=\"submit\" disabled={!formState.isValid}>\r\n            {isLogin ? \"LOGIN\" : \"SIGNUP\"}\r\n          </Button>\r\n        </form>\r\n        <Button inverse onClick={switchModeHandler}>\r\n          SWITCH TO {isLogin ? \"SIGNUP\" : \"LOGIN\"}\r\n        </Button>\r\n      </Card>\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default Auth;\r\n"],"names":["props","file","setFile","useState","previewUrl","setPreviewUrl","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","type","id","ref","style","display","accept","onChange","event","pickedFile","fileIsValid","target","files","length","onInput","center","src","alt","Button","onClick","pickImageHandler","current","click","errorText","inputReducer","state","action","value","val","validate","validators","isTouched","inputState","dispatch","useReducer","initialValue","initialValid","changeHandler","touchHandler","element","placeholder","onBlur","rows","htmlFor","label","Modal","onCancel","onClear","header","show","error","footer","ModalOverlay","content","headerClass","onSubmit","preventDefault","contentClass","footerClass","createPortal","document","getElementById","React","Backdrop","CSSTransition","in","mountOnEnter","unmountOnExit","timeout","classNames","formReducer","formIsValid","inputId","inputs","formValid","useForm","initialInputs","initialFormValidity","formState","useCallback","inputData","formValidity","useHttpClient","isLoading","setIsLoading","setError","activeHtttpRequests","sendRequest","async","url","method","arguments","undefined","body","headers","httpAbortCtrl","AbortController","push","response","fetch","signal","responseData","json","filter","reqCtrl","ok","Error","message","err","forEach","abortCtrl","abort","clearError","VALIDATOR_TYPE_REQUIRE","VALIDATOR_TYPE_MINLENGTH","VALIDATOR_TYPE_MAXLENGTH","VALIDATOR_TYPE_EMAIL","VALIDATOR_REQUIRE","VALIDATOR_MINLENGTH","VALIDATOR_EMAIL","validator","trim","test","Auth","auth","useContext","AuthContext","isLogin","setIsLogin","inputHandler","setFormData","email","password","ErrorModal","Card","LoadingSpinner","asOverlay","process","JSON","stringify","login","userId","token","formData","FormData","append","name","image","Input","ImageUpload","disabled","inverse","switchModeHandler","prevMode"],"sourceRoot":""}